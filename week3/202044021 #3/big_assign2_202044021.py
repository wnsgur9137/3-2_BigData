# -*- coding: utf-8 -*-
"""big_assign2_new.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pzighNrnt0fz4o-VLXjUVacNeKnzoyEv

1.아래와 같은 구조를 갖는 시리즈를 만들고 print 하는 code를 아래 셀에  작성한 후 실행하시오. 교안의 예제1-1 참고


|||
|-|-|
|e|5|
|d|6|
|f|7|
|g|8|
"""

# Commented out IPython magic to ensure Python compatibility.
# %reset -f
#과제 1
import pandas as pd

dict_data = {'e': 5,
             'd': 6,
             'f': 7,
             'g': 8}

sr = pd.Series(dict_data)

print(type(sr))
print('\n')
print(sr)

"""2.아래와 같은 구조를 갖는 시리즈를 파이썬 리스트를 이용해 만들고 print 하는 code를 아래 셀에  작성한 후 실행하시오. 교안의 예제1-2 참고


|||
|-|-|
|0|amy|
|1|15|
|2|cse|
|3|3|
"""

# Commented out IPython magic to ensure Python compatibility.
# %reset -f
#과제 2
import pandas as pd

list_data = ['amy', 15, 'cse', 3]
sr = pd.Series(list_data)
print(sr)

"""3.아래와 같은 구조를 갖는 시리즈를   
1) 파이썬 튜플과 index option을 이용하여 만들고 print 하는 code를 아래 셀에  작성한 후 실행하시오. 교안의 예제1-3 (1) 참고 

|||
|-|-|
|이름|우석|
|생년월일|2003-01-03|
|성별|남|
|학교|true|
"""

# Commented out IPython magic to ensure Python compatibility.
# %reset -f
#과제 3
import pandas as pd

tup_data = ('우석', '2003-01-03', '남', True)
sr = pd.Series(tup_data, index=['이름', '생년월일', '남', '학교'])
print(sr)

"""4.아래와 같은 구조를 갖는 데이터 프레임을 딕셔너리를 이용하여  만들고 print 하는 code를 아래 셀에  작성한 후 실행하시오. 교안의 예제 1-4 참고


||e1|e2|e3|
|-|-|-|-|
|0|1|2|3|
|1|4|3|4|
|2|5|3|2|
"""

# Commented out IPython magic to ensure Python compatibility.
# %reset -f
#과제 4

# DataFrame
# 데이터프레임의 각 열은 공통의 속성을 갖 는 일련의 데이터를 나타냄.
# 같은 길이(원소의 개수가 동일한)의 배열 여러 개가 필요. 데이터프레임은 여러 개의 시리즈(열, column)를 모아 놓은 집합.
# 여러 개의 리스트를 원소로 갖는 딕셔너리를 함수에 전달하는 방식을 주로 활용.

import pandas as pd

dict_data = {'e1': [1, 4, 5],
             'e2': [2, 3, 3],
             'e3': [3, 4, 2]}

# 판다스 DataFrame() 람수로 딕셔너리를 데이터프레임으로 변환
df = pd.DataFrame(dict_data)

print(type(df))
print('\n')
print(df)

"""5.아래와 같은 구조를 갖는 데이터 프레임을 리스트와 행 인덱스, 열 인덱스 지정방법으로  만들고 print 하는 code를 아래 셀에  작성한 후 실행하시오. 교안의 예제 1-5 참고


||나이|성별|취미|
|-|-|-|-|
|우석|22|남|피아노|
|나라|23|여|산책|

"""

# Commented out IPython magic to ensure Python compatibility.
# %reset -f
#과제 5
import pandas as pd

# 행 인덱스, 열 이름 지정하여 데이터프레임 만들기.
df = pd.DataFrame([[22, '남', '피아노'],
                   [23, '여', '산책']],
                  index=['우석', '나라'],
                  columns=['나이', '성별', '취미'])

print(df)

"""6.행 인덱스/열 이름 설정  ( 교안 예제 1-5,1-6)  
1) 아래와 같은 구조를 갖는 데이터 프레임을 리스트와 행 인덱스, 열 인덱스 지정방법으로  만들고 print 하고  

||나이|학교|취미|
|-|-|-|-|
|우석|17|고등|피아노|
|나라|14|중등|산책|

2) 아래와 같은 구조를 가지도록 속성을 지정하여 변경하고 print

||age|school|hobby|
|-|-|-|-|
|student1|17|고등|피아노|
|student2|14|중등|산책|


3) 다시 아래와 같은 구조를 가지도록 속성을 지정하여 변경하고 (원본 객체 변경) print 

||feat1|feat2|fest3|
|-|-|-|-|
|data1|17|고등|피아노|
|data2|14|중등|산책|

하는 code를 아래 cell에 작성하고 실행 하시오. 
"""

# Commented out IPython magic to ensure Python compatibility.
# %reset -f
#과제 6
import pandas as pd

df = pd.DataFrame([[17, '고등', '피아노'],
                   [14, '중등', '산책']],
                   index=['우석', '나라'],
                   columns=['나이', '학교', '취미'])
print(df)
print("\n-------------------\n")

df.rename(columns={'나이': 'age',
                   '학교': 'school',
                   '취미': 'hobby'}, inplace=True)
df.rename(index={'우석': 'student1',
                 '나라': 'student2'}, inplace=True)
print(df)
print("\n-------------------\n")

df.rename(columns={'age': 'feat1',
                   'school': 'feat2',
                   'hobby': 'feat3'}, inplace=True)
df.rename(index={'student1': 'data1',
                 'student2': 'data2'}, inplace=True)
print(df)

"""7.아래와 같은 구조를 갖는  데이터 프레임에서 
1) 우석의 행을 삭제하고 print하는 code와  
2) 나라와 민정의 행을 삭제하고 print 하는 code  
3) 나이의 열를 삭제하고 print하는 code와  
4) 구분과 학교의 열을 데이터를 삭제하고 print 하는 code를 아래 cell에 작성 하고 실행 하시오. (교안 1-7,1-8 참조)

||나이|구분|취미|학교 |
|-|-|-|-|-|
|우석|17|고등|독서|선경|
|인아|14|중등|산책|한국|
|나라|12|초등|축구|우성|
|민정|19|고등|독서|효성|
|서준|15|중등|농구|상성|

"""

# Commented out IPython magic to ensure Python compatibility.
# %reset -f
#과제 7

# 행 삭제: DataFrame 객체.drop(행 인덱스 또는 배열, axis=0)
# 열 삭제: DataFrame 객체.drop(열 이름 또는 배열, axis=1)

import pandas as pd
student_data = {'나이': [17,14,12,19,15], 
                '구분':['고등','중등','초등','고등','중등'], 
                '취미':['독서','산책','축구', '독서','농구'], 
                '학교':['선경','한국','우성','효성','상성'] }    
df=pd.DataFrame(student_data,index=['우석', '인아', '나라', '민정', '서준'])
print('df: \n', df)
print('\n-----------------\n')

df1=df[:]
# 1) 우석의 행을 삭제
df1.drop('우석', axis=0, inplace=True)
print('df1: \n', df1)
print('\n-----------------\n')

df2=df[:]
# 2) 나라와 민정의 행을 삭제
df2.drop(['나라', '민정'], axis=0, inplace=True)
print('df2: \n', df2)
print('\n-----------------\n')

df3=df[:]
# 3) 나이의 열을 삭제
df3.drop('나이', axis=1, inplace=True)
print('df3: \n', df3)
print('\n-----------------\n')

df4=df[:]
# 4) 구분과 학교의 열을 삭제
df4.drop(['구분', '학교'], axis=1, inplace=True)
print('df4: \n', df4)
print('\n-----------------\n')

"""8.아래와 같은 구조를 갖는  데이터 프레임에서  
1) 인아의 행을 선택하고 print하는 code를 loc을 이용한 방법 iloc 을 아용한 방법으로   
2) 나라와 민정의 행을 선택하고 print하는 code를 loc을 이용한 방법 iloc 을 아용한 방법으로  
3) 취미와 학교 열을 선택 하고 print하는 code  
를 아래셀에 작성 하고 실행 하시오. (예제  1-9,1-10)


||나이|구분|취미|학교 |
|-|-|-|-|-|
|우석|17|고등|독서|선경|
|인아|14|중등|산책|한국|
|나라|12|초등|축구|우성|
|민정|19|고등|독서|효성|
|서준|15|중등|농구|상성|

"""

# Commented out IPython magic to ensure Python compatibility.
# %reset -f
#과제 8

# 인덱스 이름을 기준으로 행을 선택할 때는 loc,
# 정수형 위치 인덱스를 사용할 때는 iloc를 이용.

import pandas as pd
student_data = {'나이': [17,14,12,19,15], 
                '구분':['고등','중등','초등','고등','중등'], 
                '취미':['독서','산책','축구', '독서','농구'], 
                '학교':['선경','한국','우성','효성','상성'] }    
df=pd.DataFrame(student_data,index=['우석', '인아', '나라', '민정', '서준'])
print('df: \n', df.loc['우석','구분'])
print('\n')



# 1) 인아의 행을 선택
# 1-1) loc 이용 방법
label_ina = df.loc['인아']
print('loc를 이용한 인아의 행 선택: \n', label_ina)
print('\n')

# 1-2) iloc 이용 방법
position_ina = df.iloc[1]
print('iloc를 이용한 인아의 행 선택: \n', position_ina)

print('\n-------------------------------------------\n')



# 2) 나라와 민정의 행을 선택
# 2-1) loc 이용 방법

label_2 = df.loc[['나라', '민정']]
print('loc를 이용한 나라와 민정의 행: \n', label_2)
print('\n')

# 2-2) iloc 이용 방법
position_2 = df.iloc[[3, 4]]
print('iloc를 이용한 나라와 민정의 행: \n', position_2)

print('\n-------------------------------------------\n')



# 3) 취미와 학교 열을 선택
# 열 1개 선택(시리즈 생성): DataFrame 객체["열 이름"] 또는 DataFrame 객체.열 이름
hobby_school = df[['취미', '학교']]
print(hobby_school)

"""9.아래와 같은 구조를 갖는  데이터 프레임에서  
1) 인아의 취미를 선택 하고 print하는  code를 loc과 iloc을 이용하여 작성  
2) 나라와 민정의 취미와 학교를 선택하고 print하는 code를 loc과 iloc을 이용하여 아래 cell에 작성하고 실행 하시오.  (예제 1-11)

||나이|구분|취미|학교 |
|-|-|-|-|-|
|우석|17|고등|독서|선경|
|인아|14|중등|산책|한국|
|나라|12|초등|축구|우성|
|민정|19|고등|독서|효성|
|서준|15|중등|농구|상성|

"""

# Commented out IPython magic to ensure Python compatibility.
# %reset -f
#과제 9
import pandas as pd
student_data = {'나이': [17,14,12,19,15],
                '구분':['고등','중등','초등','고등','중등'], 
                '취미':['독서','산책','축구', '독서','농구'], 
                '학교':['선경','한국','우성','효성','상성'] }    
df=pd.DataFrame(student_data,index=['우석', '인아', '나라', '민정', '서준'])
print(df)
print('\n')



# 1) 인아의 취미를 선택
# 1-1) loc를 이용한 방법
loc_1 = df.loc['인아', '취미']
print('loc를 이용한 인아의 취미: \n', loc_1)
print('\n')

# 1-2) iloc를 이용한 방법
iloc_1 = df.iloc[1, 2]
print('iloc를 이용한 인아의 취미: \n', iloc_1)
print('\n-------------------------------------\n')


# 2) 나라와 민정의 취미와 학교를 선택
# 2-1) loc를 이용한 방법
loc_2 = df.loc[['나라', '민정'], ['취미', '학교']]
print('loc를 이용한 나라와 민정의 취미와 학교: \n', loc_2)
print('\n')


# 2-2) iloc를 이용한 방법
iloc_2 = df.iloc[[2, 3], [2, 3]]
print('iloc를 이용한 나라와 민정의 취미와 학교: \n', iloc_2)
print('\n')

"""10.아래와 같은 구조를 갖는  데이터 프레임에서  
1) '영어'  열을 추가 하고 모든 값을 90점으로 입력하고 print  code를 작성 하시오.  
2) '영진'  행을 추가 하고 값을 18, 고등, 배구, 선경,90 으로 입력하고 print code를   
3)  나라의 취미와 학교를 농구, 선경으로 변경하고 print하는 code를 
작성 하고 실행하시오. (예제 1-12, 1-13,1-14)

||나이|구분|취미|학교 |
|-|-|-|-|-|
|우석|17|고등|독서|선경|
|인아|14|중등|산책|한국|
|나라|12|초등|축구|우성|
|민정|19|고등|독서|효성|
|서준|15|중등|농구|상성|
"""

# Commented out IPython magic to ensure Python compatibility.
# %reset -f
#과제 10
import pandas as pd
student_data = {'이름':['우석', '인아', '나라', '민정', '서준'],
                '나이': [17,14,12,19,15], 
                '구분':['고등','중등','초등','고등','중등'], 
                '취미':['독서','산책','축구', '독서','농구'], 
                '학교':['선경','한국','우성','효성','상성'] }    
df=pd.DataFrame(student_data)

# '이름' 열을 새로운 인덱스로 지정하고, df 객체에 변경사항 반영
df.set_index('이름', inplace=True)

print(df)
print('\n-------------------------------------\n')


# 1) '영어' 열을 추가 하고 모든 값을 90점으로 입력한다.
df['영어'] = 90
print('영어 열을 추가하고 모든 값을 90점으로 입력: \n', df)
print('\n-------------------------------------\n')


# 2) '영진' 행을 추가하고 값을 18, 고등, 배구, 선경, 90 으로 입력
df.loc['영진'] = [18, '고등', '배구', '선경', 90]
print('영진 행을 추가하고 값을 18, 고등, 배구, 선경, 90으로 입력: \n', df)
print('\n-------------------------------------\n')

# 3) 나라의 취미와 학교를 농구, 선경으로 변경
# 3-1) loc를 이용한 방법
# df['나라']['취미'] = '농구'
# df['나라']['학교'] = '선경'
df.loc['나라', ['취미', '학교']] = ['농구', '선경']
print('loc를 이용해 나라의 취미와 학교를 농구, 선경으로 변경: \n', df)
print('\n')

# 3-2) iloc를 이용한 방법
df.iloc[2, [2, 3]] = ['농구', '선경']
print('iloc를 이용해 나라의 취미와 학교를 농구, 선경으로 변경: \n', df)
print('\n-------------------------------------\n')

"""11.아래와 같은 구조를 갖는 데이터 프레임에서  
1) '이름' 열을 행 index로 지정하고   
2) 행 index 기준으로 sorting(오름 차순) 하고 print하는 code를 작성하시오.     
 (예제 1-17~19)

|이름|나이|구분|취미|학교 |
|-|-|-|-|-|
|우석|17|고등|독서|선경|
|인아|14|중등|산책|한국|
|나라|12|초등|축구|우성|
|민정|19|고등|독서|효성|
|서준|15|중등|농구|상성|
"""

# Commented out IPython magic to ensure Python compatibility.
# %reset -f
#과제 11

# 새로운 배열로 행 인덱스를 재지정: DataFrame 객체.reindex(새로운 인덱스 배열)
# sort_index() 메소드로 행 인덱스를 기준으로 정렬.
# ascending 옵션을 사용하여 오름차순 또는 내림차순으로 설정.

import pandas as pd
student_data = {'이름':['우석', '인아', '나라', '민정', '서준'],
                '나이': [17,14,12,19,15], 
                '구분':['고등','중등','초등','고등','중등'], 
                '취미':['독서','산책','축구', '독서','농구'], 
                '학교':['선경','한국','우성','효성','상성'] }    
df=pd.DataFrame(student_data)

# 1) '이름' 열을 행 index로 지정
df = pd.DataFrame(student_data, index=student_data['이름'])

# '이름' 열 삭제
df.drop('이름', axis=1, inplace=True)
print("'이름' 열을 행 index로 지정: \n", df)

print("\n---------------------------------------'\n")

# 2) 행 index 기준으로 sorting(오름 차순) 정렬
df = df.sort_index(ascending=False)
print('행 index 기준으로 sorting(오름 차순) 정렬: \n', df)

"""12.(선택) 과제에 upload되어 있는 Case.csv   
1) 파일을 읽어 데이터 프레임에 저장하고    
2) 'city' 열을 삭제하고     
3) 'country' 열을 추가 하여 모든 값을 'korea'로 정하고  
10) 'case2.csv' 파일로 저장 하는 code를   
아래 cell에 작성하고 실행 하시오.   
"""

# Commented out IPython magic to ensure Python compatibility.
# %reset -f
#과제 12
import pandas as pd

# csv 파일 읽기
# pandas.read_csv("파일 경로(이름)")


# 1) 파일을 읽어 데이터 프레임에 저장
df = pd.read_csv('/content/Case.csv')

# 2) 'city' 열 삭제
df.drop('city', axis=1, inplace=True)
ㄹ
# 3) 'country' 열 추가 (모든 값은 'korea')
df['country'] = 'korea'
print(df)

# 4) case2.csv 파일로 저장
df.to_csv("/content/Case2.csv")
